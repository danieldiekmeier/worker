"use strict";(self.webpackChunkgraphile_worker=self.webpackChunkgraphile_worker||[]).push([[239],{5318:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(7378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),g=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=g(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=g(n),m=a,d=u["".concat(s,".").concat(m)]||u[m]||c[m]||o;return n?r.createElement(d,l(l({ref:t},p),{},{components:n})):r.createElement(d,l({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:a,l[1]=i;for(var g=2;g<o;g++)l[g]=n[g];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5257:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>g});var r=n(5773),a=(n(7378),n(5318));const o={title:"Library: Logger",sidebar_label:"Logger"},l=void 0,i={unversionedId:"library/logger",id:"library/logger",title:"Library: Logger",description:"We use @graphile/logger as a log",source:"@site/docs/library/logger.md",sourceDirName:"library",slug:"/library/logger",permalink:"/docs/library/logger",draft:!1,editUrl:"https://github.com/graphile/worker/tree/main/website/docs/library/logger.md",tags:[],version:"current",frontMatter:{title:"Library: Logger",sidebar_label:"Logger"},sidebar:"tutorialSidebar",previous:{title:"addJob()",permalink:"/docs/library/add-job"},next:{title:"Database schema",permalink:"/docs/schema"}},s={},g=[],p={toc:g},u="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"We use ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/graphile/logger"},(0,a.kt)("inlineCode",{parentName:"a"},"@graphile/logger"))," as a log\nabstraction so that you can log to whatever logging facilities you like. By\ndefault this will log to ",(0,a.kt)("inlineCode",{parentName:"p"},"console"),", and debug-level messages are not output\nunless you have the environmental variable ",(0,a.kt)("inlineCode",{parentName:"p"},"GRAPHILE_LOGGER_DEBUG=1"),". You can\noverride this by passing a custom ",(0,a.kt)("inlineCode",{parentName:"p"},"logger"),"."),(0,a.kt)("p",null,"It's recommended that your tasks always use the methods on ",(0,a.kt)("inlineCode",{parentName:"p"},"helpers.logger")," for\nlogging so that you can later route your messages to a different log store if\nyou want to. There are 4 methods, one for each level of severity (",(0,a.kt)("inlineCode",{parentName:"p"},"error"),",\n",(0,a.kt)("inlineCode",{parentName:"p"},"warn"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"info"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"debug"),"), and each accept a string as the first argument and\noptionally an arbitrary object as the second argument:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"helpers.logger.error(message: string, meta?: LogMeta)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"helpers.logger.warn(message: string, meta?: LogMeta)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"helpers.logger.info(message: string, meta?: LogMeta)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"helpers.logger.debug(message: string, meta?: LogMeta)"))),(0,a.kt)("p",null,"You may customise where log messages from ",(0,a.kt)("inlineCode",{parentName:"p"},"graphile-worker")," (and your tasks) go\nby supplying a custom ",(0,a.kt)("inlineCode",{parentName:"p"},"Logger")," instance using your own ",(0,a.kt)("inlineCode",{parentName:"p"},"logFactory"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const { Logger, run } = require(\"graphile-worker\");\n\n/* Replace this function with your own implementation */\nfunction logFactory(scope) {\n  return (level, message, meta) => {\n    console.log(level, message, scope, meta);\n  };\n}\n\nconst logger = new Logger(logFactory);\n\n// Pass the logger to the 'run' method as part of options:\nrun({\n  logger,\n  /* pgPool, taskList, etc... */\n});\n")),(0,a.kt)("p",null,"Your ",(0,a.kt)("inlineCode",{parentName:"p"},"logFactory")," function will be passed a scope object which may contain the\nfollowing keys (all optional):"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"label")," (string): a rough description of the type of action ('worker' and\n'job' are the currently used values)."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"workerId")," (string): the ID of the worker instance"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"taskIdentifier")," (string): the task name (identifier) of the running job"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"jobId")," (number): the id of the running job")),(0,a.kt)("p",null,"And it should return a logger function which will receive these three arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"level")," ('error', 'warning', 'info' or 'debug') - severity of the log message"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"message")," (string) - the log message itself"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"meta")," (optional object) - may contain other useful metadata, useful in\nstructured logging systems")),(0,a.kt)("p",null,"The return result of the logger function is currently ignored; but we strongly\nrecommend that for future compatibility you do not return anything from your\nlogger function."),(0,a.kt)("p",null,"See the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/graphile/logger"},(0,a.kt)("inlineCode",{parentName:"a"},"@graphile/logger"))," documentation\nfor more information."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"NOTE"),": you do not need to (and should not) customise, inherit or extend the\n",(0,a.kt)("inlineCode",{parentName:"p"},"Logger")," class at all."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"NOTE"),": some log messages are gated behind the\n",(0,a.kt)("inlineCode",{parentName:"p"},"GRAPHILE_ENABLE_DANGEROUS_LOGS=1")," environmental variable - to see them you will\nneed to enable that envvar AND enable debug logging (e.g. with\n",(0,a.kt)("inlineCode",{parentName:"p"},"GRAPHILE_LOGGER_DEBUG=1")," as mentioned above) - do not do this in production as\nthese logs may include incredibly sensitive details such as your full database\nconnection string including password."))}c.isMDXComponent=!0}}]);