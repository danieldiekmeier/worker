"use strict";(self.webpackChunkgraphile_worker=self.webpackChunkgraphile_worker||[]).push([[285],{5318:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7378);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),h=r,m=d["".concat(l,".").concat(h)]||d[h]||u[h]||o;return n?a.createElement(m,i(i({ref:t},p),{},{components:n})):a.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},4411:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=n(5773),r=(n(7378),n(5318));const o={title:"Database schema",sidebar_position:63},i=void 0,s={unversionedId:"schema",id:"schema",title:"Database schema",description:"By default, Graphile Worker installs its tables and functions into a database",source:"@site/docs/schema.md",sourceDirName:".",slug:"/schema",permalink:"/docs/schema",draft:!1,editUrl:"https://github.com/graphile/worker/tree/main/website/docs/schema.md",tags:[],version:"current",sidebarPosition:63,frontMatter:{title:"Database schema",sidebar_position:63},sidebar:"tutorialSidebar",previous:{title:"Logger",permalink:"/docs/library/logger"},next:{title:"TypeScript",permalink:"/docs/typescript"}},l={},c=[{value:"Only use public APIs",id:"only-use-public-apis",level:2},{value:"Tracking jobs",id:"tracking-jobs",level:2}],p={toc:c},d="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"By default, Graphile Worker installs its tables and functions into a database\nschema (namespace) called ",(0,r.kt)("inlineCode",{parentName:"p"},"graphile_worker"),", though this is configurable."),(0,r.kt)("h2",{id:"only-use-public-apis"},"Only use public APIs"),(0,r.kt)("p",null,"You should interact with Graphile Worker using the APIs documented in this\nwebsite (such as the ",(0,r.kt)("a",{parentName:"p",href:"/docs/sql-add-job"},(0,r.kt)("inlineCode",{parentName:"a"},"graphile_worker.add_job()")," function"),"\nand the ",(0,r.kt)("a",{parentName:"p",href:"/docs/admin-functions"},"administrative functions"),"). Database tables are\nnot a public interface!"),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"Do not use the various tables (",(0,r.kt)("inlineCode",{parentName:"p"},"jobs"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"job_queues"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"known_crontabs"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"migrations"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"tasks"),") directly. There are a few reasons for this:"),(0,r.kt)("ol",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ol"},"The various tables may change in a minor version, breaking your assumptions\n(see, for example, the v0.13 \u27a1\ufe0f v0.14 big shift)"),(0,r.kt)("li",{parentName:"ol"},"Reading from the jobs table impacts performance of the queue ","\u2014","\nespecially when doing aggregates or similar"),(0,r.kt)("li",{parentName:"ol"},"Reading from the jobs table inside a transaction prevents those jobs being\nworked on (they may be skipped over as if they don't exist) ","\u2014"," this can\nlead to unexpected results, such as out-of-order execution."))),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"You may think reading from the ",(0,r.kt)("inlineCode",{parentName:"p"},"jobs")," table in a read replica is safe ","\u2014","\nand certainly it shouldn't have the performance overhead of doing so on the\nprimary ","\u2014"," but do keep in mind that we may change the schema of the table\nin a minor update, so any code relying on the table structure can be brittle. If\nyou really feel you need this, please file an issue and we can discuss if there\nmight be a better way to solve the problem.")),(0,r.kt)("h2",{id:"tracking-jobs"},"Tracking jobs"),(0,r.kt)("p",null,"Since you should not interact with the ",(0,r.kt)("inlineCode",{parentName:"p"},"jobs"),' table directly, should you need to\ntrack completed jobs or associate additional data with any jobs, we suggest that\nyou create a "shadow" table in your own application\'s schema in which you can\nstore additional details.'),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Create your own function to add jobs that delegates to\n",(0,r.kt)("inlineCode",{parentName:"li"},"graphile_worker.add_job(...)")," under the hood"),(0,r.kt)("li",{parentName:"ol"},'In your function, insert details of the job into your own "shadow" table'),(0,r.kt)("li",{parentName:"ol"},'If you want, add a reference from your "shadow" table to the\n',(0,r.kt)("inlineCode",{parentName:"li"},"graphile_worker.jobs")," table but be sure to add ",(0,r.kt)("inlineCode",{parentName:"li"},"ON DELETE CASCADE")," (to\ndelete the row) or ",(0,r.kt)("inlineCode",{parentName:"li"},"ON DELETE SET NULL")," (to nullify the job id column). Note\nthat doing this has performance overhead for the queue, so you should be very\ncertain that you need it before doing it."),(0,r.kt)("li",{parentName:"ol"},'Optionally, add the id of this "shadow" record into the job payload (before\ncalling ',(0,r.kt)("inlineCode",{parentName:"li"},"graphile_worker.add_job(...)"),'); then you can update this "shadow"\nrow from your task code. This is particularly useful to keep the end user\nabreast of the progress of their various background jobs, but is also useful\nfor tracking completed jobs (which Graphile Worker will delete on success).')))}u.isMDXComponent=!0}}]);