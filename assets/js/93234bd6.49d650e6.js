"use strict";(self.webpackChunkgraphile_worker=self.webpackChunkgraphile_worker||[]).push([[669],{5318:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>f});var n=t(7378);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function c(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=n.createContext({}),l=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},p=function(e){var r=l(e.components);return n.createElement(s.Provider,{value:r},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(t),m=o,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return t?n.createElement(f,a(a({ref:r},p),{},{components:t})):n.createElement(f,a({ref:r},p))}));function f(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=m;var c={};for(var s in r)hasOwnProperty.call(r,s)&&(c[s]=r[s]);c.originalType=e,c[u]="string"==typeof e?e:o,a[1]=c;for(var l=2;l<i;l++)a[l]=t[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1365:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var n=t(5773),o=(t(7378),t(5318));const i={title:"Docker",sidebar_position:150},a=void 0,c={unversionedId:"docker",id:"docker",title:"Docker",description:"Using the official Docker image",source:"@site/docs/docker.md",sourceDirName:".",slug:"/docker",permalink:"/docs/docker",draft:!1,editUrl:"https://github.com/graphile/worker/tree/main/website/docs/docker.md",tags:[],version:"current",sidebarPosition:150,frontMatter:{title:"Docker",sidebar_position:150},sidebar:"tutorialSidebar",previous:{title:"Support",permalink:"/docs/support"},next:{title:"Project status",permalink:"/docs/project-status"}},s={},l=[{value:"Using the official Docker image",id:"using-the-official-docker-image",level:2}],p={toc:l},u="wrapper";function d(e){let{components:r,...t}=e;return(0,o.kt)(u,(0,n.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"using-the-official-docker-image"},"Using the official Docker image"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"docker pull graphile/worker\n")),(0,o.kt)("p",null,"When using the Docker image you can pass any supported options to the command\nline or use the supported environment variables. For the current list of\nsupported command line options you can run:"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"docker run --init --rm -it graphile/worker --help")),(0,o.kt)("p",null,"Adding tasks to execute is done by mounting the ",(0,o.kt)("inlineCode",{parentName:"p"},"tasks")," directory as a volume\ninto the ",(0,o.kt)("inlineCode",{parentName:"p"},"/worker")," directory."),(0,o.kt)("p",null,"The following example has a ",(0,o.kt)("inlineCode",{parentName:"p"},"tasks")," directory in the current directory on the\nDocker host. The PostgreSQL server is also running on the same host."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'docker run \\\n  --init \\\n  --rm -it \\\n  --network=host \\\n  -v "$PWD/tasks":/worker/tasks \\\n  graphile/worker \\\n    -c "postgres://postgres:postgres@localhost:5432/postgres"\n')))}d.isMDXComponent=!0}}]);