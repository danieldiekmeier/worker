"use strict";(self.webpackChunkgraphile_worker=self.webpackChunkgraphile_worker||[]).push([[644],{5318:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(7378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(h,i(i({ref:t},c),{},{components:n})):r.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1786:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(5773),a=(n(7378),n(5318));const o={title:"Administrative functions",sidebar_position:100},i=void 0,l={unversionedId:"admin-functions",id:"admin-functions",title:"Administrative functions",description:"When implementing an administrative UI you may need more control over the jobs.",source:"@site/docs/admin-functions.md",sourceDirName:".",slug:"/admin-functions",permalink:"/docs/admin-functions",draft:!1,editUrl:"https://github.com/graphile/worker/tree/main/website/docs/admin-functions.md",tags:[],version:"current",sidebarPosition:100,frontMatter:{title:"Administrative functions",sidebar_position:100},sidebar:"tutorialSidebar",previous:{title:"Recurring tasks (crontab)",permalink:"/docs/cron"},next:{title:"Forbidden flags",permalink:"/docs/forbidden-flags"}},s={},p=[{value:"Complete jobs",id:"complete-jobs",level:2},{value:"Permanently fail jobs",id:"permanently-fail-jobs",level:2},{value:"Rescheduling jobs",id:"rescheduling-jobs",level:2}],c={toc:p},d="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"When implementing an administrative UI you may need more control over the jobs.\nFor this we have added a few administrative functions that can be called in SQL\nor through the JS API. The JS API is exposed via a ",(0,a.kt)("inlineCode",{parentName:"p"},"WorkerUtils")," instance; see\n",(0,a.kt)("a",{parentName:"p",href:"http://localhost:3000/docs/library/queue#makeworkerutils"},(0,a.kt)("inlineCode",{parentName:"a"},"makeWorkerUtils")),"."),(0,a.kt)("admonition",{type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"If you choose to run ",(0,a.kt)("inlineCode",{parentName:"p"},"UPDATE")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"DELETE")," commands against the underlying\ntables, be sure to ",(0,a.kt)("em",{parentName:"p"},"NOT")," manipulate jobs that are locked as this could have\nunintended consequences. The following administrative functions will\nautomatically ensure that the jobs are not locked before applying any changes.")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"These methods are not meant to be called on the currently running job from\ninside the job itself; they are administration functions intended to be called\nexternally. Unless otherwise noted, these functions ignore locked jobs (which\nincludes all currently running jobs).")),(0,a.kt)("h2",{id:"complete-jobs"},"Complete jobs"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql",metastring:'title="SQL API"',title:'"SQL','API"':!0},"SELECT * FROM graphile_worker.complete_jobs(ARRAY[7, 99, 38674, ...]);\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="JS API"',title:'"JS','API"':!0},"const deletedJobs = await workerUtils.completeJobs([7, 99, 38674, ...]);\n")),(0,a.kt)("p",null,"Marks the specified jobs (by their ids) as if they were completed, assuming they\nare not locked. Note that completing a job deletes it. You may mark failed and\npermanently failed jobs as completed if you wish. The deleted jobs will be\nreturned (note that this may be fewer jobs than you requested)."),(0,a.kt)("h2",{id:"permanently-fail-jobs"},"Permanently fail jobs"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql",metastring:'title="SQL API"',title:'"SQL','API"':!0},"SELECT * FROM graphile_worker.permanently_fail_jobs(ARRAY[7, 99, 38674, ...], 'Enter reason here');\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="JS API"',title:'"JS','API"':!0},"const updatedJobs = await workerUtils.permanentlyFailJobs([7, 99, 38674, ...], 'Enter reason here');\n")),(0,a.kt)("p",null,"Marks the specified jobs (by their ids) as failed permanently, assuming they are\nnot locked. This means setting their ",(0,a.kt)("inlineCode",{parentName:"p"},"attempts")," equal to their ",(0,a.kt)("inlineCode",{parentName:"p"},"max_attempts"),".\nThe updated jobs will be returned (note that this may be fewer jobs than you\nrequested)."),(0,a.kt)("h2",{id:"rescheduling-jobs"},"Rescheduling jobs"),(0,a.kt)("p",null,"SQL:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql",metastring:'title="SQL API"',title:'"SQL','API"':!0},"SELECT * FROM graphile_worker.reschedule_jobs(\n  ARRAY[7, 99, 38674, ...],\n  run_at := NOW() + interval '5 minutes',\n  priority := 5,\n  attempts := 5,\n  max_attempts := 25\n);\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="JS API"',title:'"JS','API"':!0},"const updatedJobs = await workerUtils.rescheduleJobs(\n  [7, 99, 38674, ...],\n  {\n    runAt: '2020-02-02T02:02:02Z',\n    priority: 5,\n    attempts: 5,\n    maxAttempts: 25\n  }\n);\n")),(0,a.kt)("p",null,"Updates the specified scheduling properties of the jobs (assuming they are not\nlocked). All of the specified options are optional, omitted or null values will\nleft unmodified."),(0,a.kt)("p",null,"This method can be used to postpone or advance job execution, or to schedule a\npreviously failed or permanently failed job for execution. The updated jobs will\nbe returned (note that this may be fewer jobs than you requested)."))}u.isMDXComponent=!0}}]);