"use strict";(self.webpackChunkgraphile_worker=self.webpackChunkgraphile_worker||[]).push([[698],{5318:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var r=n(7378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(n),m=a,k=p["".concat(s,".").concat(m)]||p[m]||d[m]||o;return n?r.createElement(k,i(i({ref:t},c),{},{components:n})):r.createElement(k,i({ref:t},c))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:a,i[1]=l;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1638:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var r=n(5773),a=(n(7378),n(5318));const o={title:"Library: queueing jobs",sidebar_position:65,sidebar_label:"Queueing jobs"},i=void 0,l={unversionedId:"library/queue",id:"library/queue",title:"Library: queueing jobs",description:"You can also use the graphile-worker library to queue jobs using one of the",source:"@site/docs/library/queue.md",sourceDirName:"library",slug:"/library/queue",permalink:"/docs/library/queue",draft:!1,editUrl:"https://github.com/graphile/worker/tree/main/website/docs/library/queue.md",tags:[],version:"current",sidebarPosition:65,frontMatter:{title:"Library: queueing jobs",sidebar_position:65,sidebar_label:"Queueing jobs"},sidebar:"tutorialSidebar",previous:{title:"Running jobs",permalink:"/docs/library/run"},next:{title:"addJob()",permalink:"/docs/library/add-job"}},s={},u=[{value:"<code>makeWorkerUtils()</code>",id:"makeworkerutils",level:2},{value:"<code>WorkerUtilsOptions</code>",id:"workerutilsoptions",level:2},{value:"<code>WorkerUtils</code>",id:"workerutils",level:2},{value:"<code>quickAddJob()</code>",id:"quickaddjob",level:2}],c={toc:u},p="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"You can also use the ",(0,a.kt)("inlineCode",{parentName:"p"},"graphile-worker")," library to queue jobs using one of the\nfollowing APIs."),(0,a.kt)("p",null,"NOTE: although running the worker will automatically install its schema, the\nsame is not true for queuing jobs. You must ensure that the worker database\nschema is installed before you attempt to enqueue a job; you can install the\ndatabase schema into your database with the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'yarn graphile-worker -c "postgres:///my_db" --schema-only\n')),(0,a.kt)("p",null,"Alternatively you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"WorkerUtils")," migrate method:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"await workerUtils.migrate();\n")),(0,a.kt)("h2",{id:"makeworkerutils"},(0,a.kt)("inlineCode",{parentName:"h2"},"makeWorkerUtils()")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"function makeWorkerUtils(options: WorkerUtilsOptions): Promise<WorkerUtils>;\n")),(0,a.kt)("p",null,"Useful for adding jobs from within JavaScript in an efficient way."),(0,a.kt)("p",null,"Runnable example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const { makeWorkerUtils } = require("graphile-worker");\n\nasync function main() {\n  const workerUtils = await makeWorkerUtils({\n    connectionString: "postgres:///my_db",\n  });\n  try {\n    await workerUtils.migrate();\n\n    await workerUtils.addJob(\n      // Task identifier\n      "calculate-life-meaning",\n\n      // Payload\n      { value: 42 },\n\n      // Optionally, add further task spec details here\n    );\n\n    // await workerUtils.addJob(...);\n    // await workerUtils.addJob(...);\n    // await workerUtils.addJob(...);\n  } finally {\n    await workerUtils.release();\n  }\n}\n\nmain().catch((err) => {\n  console.error(err);\n  process.exit(1);\n});\n')),(0,a.kt)("p",null,"We recommend building one instance of WorkerUtils and sharing it as a singleton\nthroughout your code."),(0,a.kt)("h2",{id:"workerutilsoptions"},(0,a.kt)("inlineCode",{parentName:"h2"},"WorkerUtilsOptions")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"exactly one of these keys must be present to determine how to connect to the\ndatabase:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"connectionString"),": A PostgreSQL connection string to the database\ncontaining the job queue, or"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"pgPool"),": A ",(0,a.kt)("inlineCode",{parentName:"li"},"pg.Pool")," instance to use"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"schema")," can be used to change the default ",(0,a.kt)("inlineCode",{parentName:"li"},"graphile_worker")," schema to\nsomething else (equivalent to ",(0,a.kt)("inlineCode",{parentName:"li"},"--schema")," on the CLI)")),(0,a.kt)("h2",{id:"workerutils"},(0,a.kt)("inlineCode",{parentName:"h2"},"WorkerUtils")),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"WorkerUtils")," instance has the following methods:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"addJob(name: string, payload: JSON, spec: TaskSpec)")," - a method you can call\nto enqueue a job, see ",(0,a.kt)("a",{parentName:"li",href:"#addjob"},"addJob"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"migrate()")," - a method you can call to update the graphile-worker database\nschema; returns a promise."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"release()")," - call this to release the ",(0,a.kt)("inlineCode",{parentName:"li"},"WorkerUtils")," instance. It's typically\nbest to use ",(0,a.kt)("inlineCode",{parentName:"li"},"WorkerUtils")," as a singleton, so you often won't need this, but\nit's useful for tests or processes where you want Node to exit cleanly when\nit's done.")),(0,a.kt)("h2",{id:"quickaddjob"},(0,a.kt)("inlineCode",{parentName:"h2"},"quickAddJob()")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"function quickAddJob(options: WorkerUtilsOptions, ...addJobArgs): Promise<Job>;\n")),(0,a.kt)("p",null,"If you want to quickly add a job and you don't mind the cost of opening a DB\nconnection pool and then cleaning it up right away ",(0,a.kt)("em",{parentName:"p"},"for every job added"),",\nthere's the ",(0,a.kt)("inlineCode",{parentName:"p"},"quickAddJob")," convenience function. It takes the same options as\n",(0,a.kt)("inlineCode",{parentName:"p"},"makeWorkerUtils")," as the first argument; the remaining arguments are for\n",(0,a.kt)("a",{parentName:"p",href:"#addjob"},(0,a.kt)("inlineCode",{parentName:"a"},"addJob")),"."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"You are recommended to use ",(0,a.kt)("inlineCode",{parentName:"p"},"makeWorkerUtils")," instead where possible, but in\none-off scripts this convenience method may be enough.")),(0,a.kt)("p",null,"Runnable example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const { quickAddJob } = require("graphile-worker");\n\nasync function main() {\n  await quickAddJob(\n    // makeWorkerUtils options\n    { connectionString: "postgres:///my_db" },\n\n    // Task identifier\n    "calculate-life-meaning",\n\n    // Payload\n    { value: 42 },\n\n    // Optionally, add further task spec details here\n  );\n}\n\nmain().catch((err) => {\n  console.error(err);\n  process.exit(1);\n});\n')))}d.isMDXComponent=!0}}]);