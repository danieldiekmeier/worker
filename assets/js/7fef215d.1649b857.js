"use strict";(self.webpackChunkgraphile_worker=self.webpackChunkgraphile_worker||[]).push([[579],{5318:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(7378);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=o,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||a;return n?r.createElement(h,i(i({ref:t},c),{},{components:n})):r.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6907:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var r=n(5773),o=(n(7378),n(5318));const a={title:"CLI: Running jobs",sidebar_label:"Running jobs",sidebar_position:50},i=void 0,l={unversionedId:"cli/run",id:"cli/run",title:"CLI: Running jobs",description:"To run Graphile Worker, simply run the graphile-worker binary passing your",source:"@site/docs/cli/run.md",sourceDirName:"cli",slug:"/cli/run",permalink:"/docs/cli/run",draft:!1,editUrl:"https://github.com/graphile/worker/tree/main/website/docs/cli/run.md",tags:[],version:"current",sidebarPosition:50,frontMatter:{title:"CLI: Running jobs",sidebar_label:"Running jobs",sidebar_position:50},sidebar:"tutorialSidebar",previous:{title:"CLI",permalink:"/docs/cli/"},next:{title:"Library",permalink:"/docs/library/"}},s={},p=[{value:"CLI options",id:"cli-options",level:2},{value:"Connection string",id:"connection-string",level:2}],c={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"To run Graphile Worker, simply run the ",(0,o.kt)("inlineCode",{parentName:"p"},"graphile-worker")," binary passing your\nPostgreSQL ",(0,o.kt)("a",{parentName:"p",href:"#connection-string"},"connection string")," via the ",(0,o.kt)("inlineCode",{parentName:"p"},"-c")," entry. Worker\nmanages its own database schema (",(0,o.kt)("inlineCode",{parentName:"p"},"graphile_worker"),") into which jobs are stored;\nwhen you start Graphile Worker it will automatically create or update this\nschema if necessary."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},'npx graphile-worker -c "postgres:///my_db"\n')),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"npx")," looks for the ",(0,o.kt)("inlineCode",{parentName:"p"},"graphile-worker")," binary locally; it's often better to use\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},'"scripts"')," entry in ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json")," instead.")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Graphile Worker expects the Postgres role used at runtime to be the same as the\nrole used while running the migrations. If you need to run your migrations as a\ndifferent role, one solution is to explicitly change the owner of the\n",(0,o.kt)("inlineCode",{parentName:"p"},"graphile_worker.*")," tables to be the same role as is used at runtime.")),(0,o.kt)("h2",{id:"cli-options"},"CLI options"),(0,o.kt)("p",null,"The following CLI options are available:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Options:\n      --help                    Show help                              [boolean]\n      --version                 Show version number                    [boolean]\n  -c, --connection              Database connection string, defaults to the\n                                'DATABASE_URL' envvar                   [string]\n  -s, --schema                  The database schema in which Graphile Worker is\n                                (to be) located\n                                           [string] [default: \"graphile_worker\"]\n      --schema-only             Just install (or update) the database schema,\n                                then exit             [boolean] [default: false]\n      --once                    Run until there are no runnable jobs left, then\n                                exit                  [boolean] [default: false]\n  -w, --watch                   [EXPERIMENTAL] Watch task files for changes,\n                                automatically reloading the task code without\n                                restarting worker     [boolean] [default: false]\n      --crontab                 override path to crontab file           [string]\n  -j, --jobs                    number of jobs to run concurrently\n                                                           [number] [default: 1]\n  -m, --max-pool-size           maximum size of the PostgreSQL pool\n                                                          [number] [default: 10]\n      --poll-interval           how long to wait between polling for jobs in\n                                milliseconds (for jobs scheduled in the\n                                future/retries)         [number] [default: 2000]\n      --no-prepared-statements  set this flag if you want to disable prepared\n                                statements, e.g. for compatibility with\n                                pgBouncer             [boolean] [default: false]\n")),(0,o.kt)("h2",{id:"connection-string"},"Connection string"),(0,o.kt)("p",null,"A PostgreSQL connection string looks like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"postgres://[user]:[pass]@[host]:[port]/[databaseName]?[parameter]=[value]\n")),(0,o.kt)("p",null,"Where each of the ",(0,o.kt)("inlineCode",{parentName:"p"},"[...]")," placeholders are optional. Here are some examples:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"postgres:///my_db")," - connect to database ",(0,o.kt)("inlineCode",{parentName:"li"},"my_db")," on the default host\n(localhost) and default port (5432)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"postgres://127.0.0.1/my_db")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"postgres://127.0.0.1:5432/my_db")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"postgres://postgres:postgres@127.0.0.1:5432/my_db")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"postgres://postgres:postgres@127.0.0.1:5432/my_db?ssl=1"))))}d.isMDXComponent=!0}}]);