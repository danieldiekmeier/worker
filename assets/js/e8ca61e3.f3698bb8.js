"use strict";(self.webpackChunkgraphile_worker=self.webpackChunkgraphile_worker||[]).push([[841],{5318:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>k});var a=n(7378);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=p(n),c=i,k=u["".concat(s,".").concat(c)]||u[c]||m[c]||o;return n?a.createElement(k,r(r({ref:t},d),{},{components:n})):a.createElement(k,r({ref:t},d))}));function k(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:i,r[1]=l;for(var p=2;p<o;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},4645:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(5773),i=(n(7378),n(5318));const o={title:"Job key",sidebar_position:80},r=void 0,l={unversionedId:"job-key",id:"job-key",title:"Job key",description:'When a job is added, you may opt to give it a "job key". Doing so will allow you',source:"@site/docs/job-key.md",sourceDirName:".",slug:"/job-key",permalink:"/docs/job-key",draft:!1,editUrl:"https://github.com/graphile/worker/tree/main/website/docs/job-key.md",tags:[],version:"current",sidebarPosition:80,frontMatter:{title:"Job key",sidebar_position:80},sidebar:"tutorialSidebar",previous:{title:"Adding jobs through SQL",permalink:"/docs/sql-add-job"},next:{title:"Recurring tasks (crontab)",permalink:"/docs/cron"}},s={},p=[{value:"Replacing/updating jobs",id:"replacingupdating-jobs",level:2},{value:"<code>job_key_mode</code>",id:"job_key_mode",level:3},{value:"Removing jobs",id:"removing-jobs",level:2},{value:"<code>job_key</code> caveats",id:"job_key-caveats",level:2}],d={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,'When a job is added, you may opt to give it a "job key". Doing so will allow you\nto identify this job in future such that you can replace, update or remove it.'),(0,i.kt)("admonition",{type:"danger"},(0,i.kt)("p",{parentName:"admonition"},"Be sure to read the ",(0,i.kt)("a",{parentName:"p",href:"#job_key-caveats"},(0,i.kt)("inlineCode",{parentName:"a"},"job_key")," caveats")," below!")),(0,i.kt)("h2",{id:"replacingupdating-jobs"},"Replacing/updating jobs"),(0,i.kt)("p",null,"Jobs scheduled with a ",(0,i.kt)("inlineCode",{parentName:"p"},"job_key")," parameter may be replaced/updated by calling\n",(0,i.kt)("inlineCode",{parentName:"p"},"add_job")," again with the same ",(0,i.kt)("inlineCode",{parentName:"p"},"job_key")," value. This can be used for rescheduling\njobs, to ensure only one of a given job is scheduled at a time, or to update\nother settings for the job."),(0,i.kt)("p",null,"For example after the below SQL transaction, the ",(0,i.kt)("inlineCode",{parentName:"p"},"send_email")," job will run only\nonce, with the payload ",(0,i.kt)("inlineCode",{parentName:"p"},"'{\"count\": 2}'"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"BEGIN;\nSELECT graphile_worker.add_job('send_email', '{\"count\": 1}', job_key := 'abc');\nSELECT graphile_worker.add_job('send_email', '{\"count\": 2}', job_key := 'abc');\nCOMMIT;\n")),(0,i.kt)("p",null,"In all cases if no match is found then a new job will be created."),(0,i.kt)("h3",{id:"job_key_mode"},(0,i.kt)("inlineCode",{parentName:"h3"},"job_key_mode")),(0,i.kt)("p",null,"Behavior when an existing job with the same job key is found is controlled by\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"job_key_mode")," setting:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"replace")," (default) - overwrites the unlocked job with the new values. This is\nprimarily useful for rescheduling, updating, or ",(0,i.kt)("strong",{parentName:"li"},"debouncing")," (delaying\nexecution until there have been no events for at least a certain time period).\nLocked jobs will cause a new job to be scheduled instead."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"preserve_run_at")," - overwrites the unlocked job with the new values, but\npreserves ",(0,i.kt)("inlineCode",{parentName:"li"},"run_at"),". This is primarily useful for ",(0,i.kt)("strong",{parentName:"li"},"throttling")," (executing at\nmost once over a given time period). Locked jobs will cause a new job to be\nscheduled instead."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"unsafe_dedupe")," - if an existing job is found, even if it is locked or\npermanently failed, then it won't be updated. This is very dangerous as it\nmeans that the event that triggered this ",(0,i.kt)("inlineCode",{parentName:"li"},"add_job")," call may not result in any\naction. It is strongly advised you do not use this mode unless you are certain\nyou know what you are doing.")),(0,i.kt)("p",null,"The full ",(0,i.kt)("inlineCode",{parentName:"p"},"job_key_mode")," algorithm is roughly as follows:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If no existing job with the same job key is found:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"a new job will be created with the new attributes."))),(0,i.kt)("li",{parentName:"ul"},"Otherwise, if ",(0,i.kt)("inlineCode",{parentName:"li"},"job_key_mode")," is ",(0,i.kt)("inlineCode",{parentName:"li"},"unsafe_dedupe"),":",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"stop and return the existing job."))),(0,i.kt)("li",{parentName:"ul"},"Otherwise, if the existing job is locked:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"it will have its ",(0,i.kt)("inlineCode",{parentName:"li"},"key")," cleared"),(0,i.kt)("li",{parentName:"ul"},"it will have its attempts set to ",(0,i.kt)("inlineCode",{parentName:"li"},"max_attempts")," to avoid it running again"),(0,i.kt)("li",{parentName:"ul"},"a new job will be created with the new attributes."))),(0,i.kt)("li",{parentName:"ul"},"Otherwise, if the existing job has previously failed:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"it will have its ",(0,i.kt)("inlineCode",{parentName:"li"},"attempts")," reset to 0 (as if it were newly scheduled)"),(0,i.kt)("li",{parentName:"ul"},"it will have its ",(0,i.kt)("inlineCode",{parentName:"li"},"last_error")," cleared"),(0,i.kt)("li",{parentName:"ul"},"it will have all other attributes updated to their new values, including\n",(0,i.kt)("inlineCode",{parentName:"li"},"run_at")," (even when ",(0,i.kt)("inlineCode",{parentName:"li"},"job_key_mode")," is ",(0,i.kt)("inlineCode",{parentName:"li"},"preserve_run_at"),")."))),(0,i.kt)("li",{parentName:"ul"},"Otherwise, if ",(0,i.kt)("inlineCode",{parentName:"li"},"job_key_mode")," is ",(0,i.kt)("inlineCode",{parentName:"li"},"preserve_run_at"),":",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"the job will have all its attributes except for ",(0,i.kt)("inlineCode",{parentName:"li"},"run_at")," updated to their\nnew values."))),(0,i.kt)("li",{parentName:"ul"},"Otherwise:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"the job will have all its attributes updated to their new values.")))),(0,i.kt)("h2",{id:"removing-jobs"},"Removing jobs"),(0,i.kt)("p",null,"Pending jobs may also be removed using ",(0,i.kt)("inlineCode",{parentName:"p"},"job_key"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT graphile_worker.remove_job('abc');\n")),(0,i.kt)("h2",{id:"job_key-caveats"},(0,i.kt)("inlineCode",{parentName:"h2"},"job_key")," caveats"),(0,i.kt)("p",null,"Jobs that complete successfully are deleted, there is no permanent ",(0,i.kt)("inlineCode",{parentName:"p"},"job_key"),"\nlog, i.e. ",(0,i.kt)("inlineCode",{parentName:"p"},"remove_job")," on a completed ",(0,i.kt)("inlineCode",{parentName:"p"},"job_key")," is a no-op as no row exists."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"job_key")," is treated as universally unique (whilst the job is\npending/failed), so you can update a job to have a completely different\n",(0,i.kt)("inlineCode",{parentName:"p"},"task_identifier")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"payload"),". You must be careful to ensure that your\n",(0,i.kt)("inlineCode",{parentName:"p"},"job_key")," is sufficiently unique to prevent you accidentally replacing or\ndeleting unrelated jobs by mistake; one way to approach this is to incorporate\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"task_identifier")," into the ",(0,i.kt)("inlineCode",{parentName:"p"},"job_key"),"."),(0,i.kt)("p",null,"If a job is updated using ",(0,i.kt)("inlineCode",{parentName:"p"},"add_job")," when it is currently locked (i.e. running),\na second job will be scheduled separately (unless\n",(0,i.kt)("inlineCode",{parentName:"p"},"job_key_mode = 'unsafe_dedupe'"),"), meaning both will run. (The old job will be\nprevented from running again, and will have the ",(0,i.kt)("inlineCode",{parentName:"p"},"job_key")," removed from it.)"),(0,i.kt)("p",null,"Calling ",(0,i.kt)("inlineCode",{parentName:"p"},"remove_job")," for a locked (i.e. running) job will not actually remove\nit, but will prevent it from running again on failure."))}m.isMDXComponent=!0}}]);