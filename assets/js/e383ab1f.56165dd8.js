"use strict";(self.webpackChunkgraphile_worker=self.webpackChunkgraphile_worker||[]).push([[116],{5318:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(7378);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=i,h=c["".concat(s,".").concat(m)]||c[m]||u[m]||r;return n?a.createElement(h,o(o({ref:t},d),{},{components:n})):a.createElement(h,o({ref:t},d))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},799:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=n(5773),i=(n(7378),n(5318));const r={title:"Task executors",sidebar_position:45,toc_max_heading_level:5},o=void 0,l={unversionedId:"tasks",id:"tasks",title:"Task executors",description:'A "job" is a description of a single "job to be done" stored into the database',source:"@site/docs/tasks.md",sourceDirName:".",slug:"/tasks",permalink:"/docs/tasks",draft:!1,editUrl:"https://github.com/graphile/worker/tree/main/website/docs/tasks.md",tags:[],version:"current",sidebarPosition:45,frontMatter:{title:"Task executors",sidebar_position:45,toc_max_heading_level:5},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/docs/installation"},next:{title:"CLI",permalink:"/docs/cli/"}},s={},p=[{value:"Task executor function",id:"task-executor-function",level:2},{value:"Example task executors",id:"example-task-executors",level:2},{value:"The <code>tasks/</code> folder",id:"the-tasks-folder",level:2},{value:"Handling batch jobs",id:"handling-batch-jobs",level:2},{value:"<code>helpers</code>",id:"helpers",level:2},{value:"<code>helpers.logger</code>",id:"helperslogger",level:3},{value:"<code>helpers.withPgClient()</code>",id:"helperswithpgclient",level:3},{value:"<code>helpers.addJob()</code>",id:"helpersaddjob",level:3}],d={toc:p},c="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,'A "job" is a description of a single "job to be done" stored into the database\nvia the JS ',(0,i.kt)("inlineCode",{parentName:"p"},"addJob()")," function or SQL ",(0,i.kt)("inlineCode",{parentName:"p"},"graphile_worker.add_job()")," function."),(0,i.kt)("p",null,'A "task" is the type of work that a job may take, for example "send email",\n"convert image" or "process webhook". A "task identifier" is a unique name given\nto a task, for example ',(0,i.kt)("inlineCode",{parentName:"p"},"send_email")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"convert_image"),'. A "task executor" is the\nfunction to execute when a job with the associated task identifier is found.'),(0,i.kt)("h2",{id:"task-executor-function"},"Task executor function"),(0,i.kt)("p",null,'A task executor is a simple async JS function which: receives as input the job\npayload and a collection of helpers, does the work, and then returns. If the\ntask executor returns successfully then the job is deemed a success and is\ndeleted from the queue (unless this is a "batch job"). If it throws an error\n(or, equivalently, rejects the promise) then the job is deemed a failure and the\ntask is rescheduled using an exponential-backoff algorithm.'),(0,i.kt)("p",null,"Each task function is passed two arguments:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"payload")," - the (JSON) payload you passed when calling\n",(0,i.kt)("inlineCode",{parentName:"li"},"graphile_worker.add_job(...)")," in the database, or ",(0,i.kt)("inlineCode",{parentName:"li"},"addJob(...)")," via the JS\nAPI"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"helpers")," (see ",(0,i.kt)("a",{parentName:"li",href:"#helpers"},(0,i.kt)("inlineCode",{parentName:"a"},"helpers"))," below) - an object containing:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"logger")," - a scoped ",(0,i.kt)("a",{parentName:"li",href:"/docs/library/logger"},"Logger")," instance, to aid\ntracing/debugging"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"job")," - the whole job (including ",(0,i.kt)("inlineCode",{parentName:"li"},"uuid"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"attempts"),", etc) - you shouldn't\nneed this"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"withPgClient")," - a helper to use to get a database client"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"query(sql, values)")," - a convenience wrapper for\n",(0,i.kt)("inlineCode",{parentName:"li"},"withPgClient(pgClient => pgClient.query(sql, values))")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"addJob")," - a helper to schedule a job")))),(0,i.kt)("admonition",{title:"Important",type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"Your jobs must wait for all asynchronous work to be completed before returning,\notherwise we might think they were successful prematurely. Every promise that a\ntask executor triggers must be ",(0,i.kt)("inlineCode",{parentName:"p"},"await"),"-ed; task executors ",(0,i.kt)("em",{parentName:"p"},"should not"),' create\n"untethered" promises.')),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"We automatically retry the job if it fails, so it's often sensible to split a\nlarge job into multiple smaller jobs, this also allows them to run in parallel\nresulting in faster execution. This is particularly important for tasks that are\nnot idempotent (i.e. running them a second time will have extra side effects) -\nfor example sending emails.")),(0,i.kt)("h2",{id:"example-task-executors"},"Example task executors"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="tasks/task_1.js"',title:'"tasks/task_1.js"'},"module.exports = async (payload) => {\n  await doMyLogicWith(payload);\n};\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="tasks/task_2.js"',title:'"tasks/task_2.js"'},"module.exports = async (payload, helpers) => {\n  // async is optional, but best practice\n  helpers.logger.debug(`Received ${JSON.stringify(payload)}`);\n};\n")),(0,i.kt)("h2",{id:"the-tasks-folder"},"The ",(0,i.kt)("inlineCode",{parentName:"h2"},"tasks/")," folder"),(0,i.kt)("p",null,"Out of the box, ",(0,i.kt)("inlineCode",{parentName:"p"},"graphile-worker")," will automatically look for ",(0,i.kt)("inlineCode",{parentName:"p"},".js")," files inside\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"tasks/")," folder inside the working directory in which ",(0,i.kt)("inlineCode",{parentName:"p"},"graphile-worker")," is\nexecuted, and will load them as tasks. The name of the file (less the ",(0,i.kt)("inlineCode",{parentName:"p"},".js"),'\nsuffix) is used as the "task identifier", and the ',(0,i.kt)("inlineCode",{parentName:"p"},"module.exports")," is used as\nthe task executor function."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"current directory\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 node_modules\n\u2514\u2500\u2500 tasks\n    \u251c\u2500\u2500 task_1.js\n    \u2514\u2500\u2500 task_2.js\n")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Currently only ",(0,i.kt)("inlineCode",{parentName:"p"},".js")," files that can be directly loaded by Node.js are supported;\nif you are using Babel, TypeScript or similar you will need to compile your\ntasks into the ",(0,i.kt)("inlineCode",{parentName:"p"},"tasks")," folder.")),(0,i.kt)("h2",{id:"handling-batch-jobs"},"Handling batch jobs"),(0,i.kt)("p",null,"If the payload is an array, then ",(0,i.kt)("em",{parentName:"p"},"optionally")," your task may choose to return an\narray of the same length, the entries in which are promises. Should any of these\npromises reject, then the job will be re-enqueued, but the payload will be\noverwritten to only contain the entries associated with the rejected promises -\ni.e. the successful entries will be removed."),(0,i.kt)("h2",{id:"helpers"},(0,i.kt)("inlineCode",{parentName:"h2"},"helpers")),(0,i.kt)("h3",{id:"helperslogger"},(0,i.kt)("inlineCode",{parentName:"h3"},"helpers.logger")),(0,i.kt)("p",null,"So that you may redirect logs to your preferred logging provider, we have\nenabled you to supply your own logging provider. Overriding this is currently\nonly available in library mode (see ",(0,i.kt)("a",{parentName:"p",href:"#logger"},"Logger"),"). We then wrap this\nlogging provider with a helper class to ease debugging; the helper class has the\nfollowing methods:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"error(message, meta?)"),": for logging errors, similar to ",(0,i.kt)("inlineCode",{parentName:"li"},"console.error")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"warn(message, meta?)"),": for logging warnings, similar to ",(0,i.kt)("inlineCode",{parentName:"li"},"console.warn")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"info(message, meta?)"),": for logging informational messages, similar to\n",(0,i.kt)("inlineCode",{parentName:"li"},"console.info")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"debug(message, meta?)"),": to aid with debugging, similar to ",(0,i.kt)("inlineCode",{parentName:"li"},"console.log")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"scope(additionalScope)"),": returns a new ",(0,i.kt)("inlineCode",{parentName:"li"},"Logger")," instance with additional\nscope information")),(0,i.kt)("h3",{id:"helperswithpgclient"},(0,i.kt)("inlineCode",{parentName:"h3"},"helpers.withPgClient()")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"withPgClient")," gets a ",(0,i.kt)("inlineCode",{parentName:"p"},"pgClient")," from the pool, calls\n",(0,i.kt)("inlineCode",{parentName:"p"},"await callback(pgClient)"),", and finally releases the client and returns the\nresult of ",(0,i.kt)("inlineCode",{parentName:"p"},"callback"),". This workflow can make testing your tasks easier."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'const {\n  rows: [row],\n} = await withPgClient((pgClient) => pgClient.query("select 1 as one"));\n')),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Neither ",(0,i.kt)("inlineCode",{parentName:"p"},"withPgClient")," nor ",(0,i.kt)("inlineCode",{parentName:"p"},"query")," methods create a database transaction. If you\nneed a database transaction, you should do so yourself, but please note that\nkeeping transactions open may decrease Graphile Worker's performance due to\nincreasing contention over the pool of database clients.")),(0,i.kt)("h3",{id:"helpersaddjob"},(0,i.kt)("inlineCode",{parentName:"h3"},"helpers.addJob()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"await helpers.addJob(identifier, payload, options);\n")),(0,i.kt)("p",null,"See ",(0,i.kt)("a",{parentName:"p",href:"#addjob"},(0,i.kt)("inlineCode",{parentName:"a"},"addJob"))))}u.isMDXComponent=!0}}]);