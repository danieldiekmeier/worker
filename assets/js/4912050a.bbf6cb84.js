"use strict";(self.webpackChunkgraphile_worker=self.webpackChunkgraphile_worker||[]).push([[795],{5318:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var i=n(7378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),p=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return i.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},c=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=p(n),c=a,h=u["".concat(s,".").concat(c)]||u[c]||m[c]||r;return n?i.createElement(h,o(o({ref:t},d),{},{components:n})):i.createElement(h,o({ref:t},d))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}c.displayName="MDXCreateElement"},6396:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var i=n(5773),a=(n(7378),n(5318));const r={title:"Recurring tasks (crontab)",sidebar_position:90},o=void 0,l={unversionedId:"cron",id:"cron",title:"Recurring tasks (crontab)",description:"You can schedule a job to run in the future using the run_at property; however",source:"@site/docs/cron.md",sourceDirName:".",slug:"/cron",permalink:"/docs/cron",draft:!1,editUrl:"https://github.com/graphile/worker/tree/main/website/docs/cron.md",tags:[],version:"current",sidebarPosition:90,frontMatter:{title:"Recurring tasks (crontab)",sidebar_position:90},sidebar:"tutorialSidebar",previous:{title:"Job key",permalink:"/docs/job-key"},next:{title:"Administrative functions",permalink:"/docs/admin-functions"}},s={},p=[{value:"Recurring schedule",id:"recurring-schedule",level:2},{value:"<code>crontab</code> format",id:"crontab-format",level:2},{value:"Crontab <code>opts</code>",id:"crontab-opts",level:3},{value:"Time phrase",id:"time-phrase",level:4},{value:"<code>payload</code>",id:"payload",level:3},{value:"Distributed crontab",id:"distributed-crontab",level:2},{value:"Examples",id:"examples",level:2},{value:"Limiting backfill",id:"limiting-backfill",level:2},{value:"Specifying cron items in library mode",id:"specifying-cron-items-in-library-mode",level:2},{value:"parsedCronItems",id:"parsedcronitems",level:3}],d={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"You can schedule a job to run in the future using the ",(0,a.kt)("inlineCode",{parentName:"p"},"run_at")," property; however\nif you want to have jobs automatically created on a schedule then this is for\nyou."),(0,a.kt)("h2",{id:"recurring-schedule"},"Recurring schedule"),(0,a.kt)("p",null,"Graphile Worker supports triggering recurring tasks according to a cron-like\nschedule. This is designed for recurring tasks such as sending a weekly email,\nrunning database maintenance tasks every day, performing data roll-ups hourly,\ndownloading external data every 20 minutes, etc."),(0,a.kt)("p",null,"Graphile Worker's crontab support:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"guarantees (thanks to ACID-compliant transactions) that no duplicate task\nschedules will occur"),(0,a.kt)("li",{parentName:"ul"},"can backfill missed jobs if desired (e.g. if the Worker wasn't running when\nthe job was due to be scheduled)"),(0,a.kt)("li",{parentName:"ul"},"schedules tasks using Graphile Worker's regular job queue, so you get all the\nregular features such as exponential back-off on failure."),(0,a.kt)("li",{parentName:"ul"},'works reliably even if you\'re running multiple workers (see "Distributed\ncrontab" below)')),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"It is not intended that you add recurring tasks for each of your individual\napplication users, instead you should have relatively few recurring tasks, and\nthose tasks can create additional jobs for the individual users (or process\nmultiple users) if necessary.")),(0,a.kt)("p",null,"Tasks are by default read from a ",(0,a.kt)("inlineCode",{parentName:"p"},"crontab")," file next to the ",(0,a.kt)("inlineCode",{parentName:"p"},"tasks/")," folder (but\nthis is configurable in library mode). Please note that our syntax is not 100%\ncompatible with cron's, and our task payload differs. We only handle timestamps\nin UTC."),(0,a.kt)("h2",{id:"crontab-format"},(0,a.kt)("inlineCode",{parentName:"h2"},"crontab")," format"),(0,a.kt)("p",null,"The following diagram details the parts of a Graphile Worker crontab schedule:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-crontab"},"# \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 UTC minute (0 - 59)\n# \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 UTC hour (0 - 23)\n# \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 UTC day of the month (1 - 31)\n# \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 UTC month (1 - 12)\n# \u2502 \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 UTC day of the week (0 - 6) (Sunday to Saturday)\n# \u2502 \u2502 \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 task (identifier) to schedule\n# \u2502 \u2502 \u2502 \u2502 \u2502 \u2502    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 optional scheduling options\n# \u2502 \u2502 \u2502 \u2502 \u2502 \u2502    \u2502     \u250c\u2500\u2500\u2500\u2500\u2500\u2500 optional payload to merge\n# \u2502 \u2502 \u2502 \u2502 \u2502 \u2502    \u2502     \u2502\n# \u2502 \u2502 \u2502 \u2502 \u2502 \u2502    \u2502     \u2502\n# * * * * * task ?opts {payload}\n")),(0,a.kt)("p",null,"Comment lines start with a ",(0,a.kt)("inlineCode",{parentName:"p"},"#"),"."),(0,a.kt)("p",null,"For the first 5 fields we support an explicit numeric value, ",(0,a.kt)("inlineCode",{parentName:"p"},"*")," to represent\nall valid values, ",(0,a.kt)("inlineCode",{parentName:"p"},"*/n")," (where ",(0,a.kt)("inlineCode",{parentName:"p"},"n")," is a positive integer) to represent all valid\nvalues divisible by ",(0,a.kt)("inlineCode",{parentName:"p"},"n"),", range syntax such as ",(0,a.kt)("inlineCode",{parentName:"p"},"1-5"),", and any combination of\nthese separated by commas."),(0,a.kt)("p",null,"The task identifier should match the following regexp\n",(0,a.kt)("inlineCode",{parentName:"p"},"/^[_a-zA-Z][_a-zA-Z0-9:_-]*$/")," (namely it should start with an alphabetic\ncharacter and it should only contain alphanumeric characters, colon, underscore\nand hyphen). It should be the name of one of your Graphile Worker tasks."),(0,a.kt)("h3",{id:"crontab-opts"},"Crontab ",(0,a.kt)("inlineCode",{parentName:"h3"},"opts")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"opts")," must always be prefixed with a ",(0,a.kt)("inlineCode",{parentName:"p"},"?")," if provided and details\nconfiguration for the task such as what should be done in the event that the\nprevious event was not scheduled (e.g. because the Worker wasn't running).\nOptions are specified using HTTP query string syntax (with ",(0,a.kt)("inlineCode",{parentName:"p"},"&")," separator)."),(0,a.kt)("p",null,"Currently we support the following ",(0,a.kt)("inlineCode",{parentName:"p"},"opts"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"id=UID")," where UID is a unique alphanumeric case-sensitive identifier starting\nwith a letter - specify an identifier for this crontab entry; by default this\nwill use the task identifier, but if you want more than one schedule for the\nsame task (e.g. with different payload, or different times) then you will need\nto supply a unique identifier explicitly."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"fill=t")," where ",(0,a.kt)("inlineCode",{parentName:"li"},"t"),' is a "time phrase" (see below) - backfill any entries from\nthe last time period ',(0,a.kt)("inlineCode",{parentName:"li"},"t"),", for example if the worker was not running when they\nwere due to be executed (by default, no backfilling)."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"max=n")," where ",(0,a.kt)("inlineCode",{parentName:"li"},"n")," is a small positive integer - override the ",(0,a.kt)("inlineCode",{parentName:"li"},"max_attempts")," of\nthe job."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"queue=name")," where ",(0,a.kt)("inlineCode",{parentName:"li"},"name")," is an alphanumeric queue name - add the job to a\nnamed queue so it executes serially."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"jobKey=key")," where ",(0,a.kt)("inlineCode",{parentName:"li"},"key")," is any valid job key - replace/update the existing\njob with this key, if present"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"jobKeyMode=replace|preserve_run_at")," - if ",(0,a.kt)("inlineCode",{parentName:"li"},"jobKey")," is specified, affects what\nit does"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"priority=n")," where ",(0,a.kt)("inlineCode",{parentName:"li"},"n")," is a relatively small integer - override the priority\nof the job.")),(0,a.kt)("admonition",{type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"Changing the identifier (e.g. via ",(0,a.kt)("inlineCode",{parentName:"p"},"id"),") can result in duplicate executions, so\nwe recommend that you explicitly set it and never change it.")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Using ",(0,a.kt)("inlineCode",{parentName:"p"},"fill")," will not backfill new tasks, only tasks that were previously known.")),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"The higher you set the ",(0,a.kt)("inlineCode",{parentName:"p"},"fill")," parameter, the longer the worker startup time will\nbe; when used you should set it to be slightly larger than the longest period of\ndowntime you expect for your worker.")),(0,a.kt)("h4",{id:"time-phrase"},"Time phrase"),(0,a.kt)("p",null,"Time phrases are comprised of a sequence of number-letter combinations, where\nthe number represents a quantity and the letter represents a time period, e.g.\n",(0,a.kt)("inlineCode",{parentName:"p"},"5d")," for ",(0,a.kt)("inlineCode",{parentName:"p"},"five days"),", or ",(0,a.kt)("inlineCode",{parentName:"p"},"3h")," for ",(0,a.kt)("inlineCode",{parentName:"p"},"three hours"),"; e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"4w3d2h1m")," represents\n",(0,a.kt)("inlineCode",{parentName:"p"},"4 weeks, 3 days, 2 hours and 1 minute")," (i.e. a period of 44761 minutes). The\nfollowing time periods are supported:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"s")," - one second (1000 milliseconds)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"m")," - one minute (60 seconds)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"h")," - one hour (60 minutes)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"d")," - one day (24 hours)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"w")," - one week (7 days)")),(0,a.kt)("h3",{id:"payload"},(0,a.kt)("inlineCode",{parentName:"h3"},"payload")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"payload")," is a JSON5 object; it must start with a ",(0,a.kt)("inlineCode",{parentName:"p"},"{"),", must not contain\nnewlines or carriage returns (",(0,a.kt)("inlineCode",{parentName:"p"},"\\n")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"\\r"),"), and must not contain trailing\nwhitespace. It will be merged into the default crontab payload properties."),(0,a.kt)("p",null,"Each crontab job will have a JSON object payload containing the key ",(0,a.kt)("inlineCode",{parentName:"p"},"_cron")," with\nthe value being an object with the following entries:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ts")," - ISO8601 timestamp representing when this job was due to execute"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"backfilled"),' - true if the task was "backfilled" (i.e. it wasn\'t scheduled on\ntime), false otherwise')),(0,a.kt)("h2",{id:"distributed-crontab"},"Distributed crontab"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"TL;DR"),": when running identical crontabs on multiple workers no special action\nis necessary - it Just Works \u2122\ufe0f"),(0,a.kt)("p",null,"When you run multiple workers with the same crontab files then the first worker\nthat attempts to queue a particular cron job will succeed and the other workers\nwill take no action - this is thanks to SQL ACID-compliant transactions and our\n",(0,a.kt)("inlineCode",{parentName:"p"},"known_crontabs")," lock table."),(0,a.kt)("p",null,"If your workers have different crontabs then you must be careful to ensure that\nthe cron items each have unique identifiers; the easiest way to do this is to\nspecify the identifiers yourself (see the ",(0,a.kt)("inlineCode",{parentName:"p"},"id=")," option above). Should you forget\nto do this then for any overlapping timestamps for items that have the same\nderived identifier one of the cron tasks will schedule but the others will not."),(0,a.kt)("h2",{id:"examples"},"Examples"),(0,a.kt)("p",null,"The following schedules the ",(0,a.kt)("inlineCode",{parentName:"p"},"send_weekly_email")," task at 4:30am (UTC) every\nMonday:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"30 4 * * 1 send_weekly_email\n")),(0,a.kt)("p",null,"The following does similar, but also will backfill any tasks over the last two\ndays (",(0,a.kt)("inlineCode",{parentName:"p"},"2d"),"), sets max attempts to ",(0,a.kt)("inlineCode",{parentName:"p"},"10")," and merges in ",(0,a.kt)("inlineCode",{parentName:"p"},'{"onboarding": false}'),"\ninto the task payload:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"30 4 * * 1 send_weekly_email ?fill=2d&max=10 {onboarding:false}\n")),(0,a.kt)("p",null,"The following triggers the ",(0,a.kt)("inlineCode",{parentName:"p"},"rollup")," task every 4 hours on the hour:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"0 */4 * * * rollup\n")),(0,a.kt)("h2",{id:"limiting-backfill"},"Limiting backfill"),(0,a.kt)("p",null,'When you ask Graphile Worker to backfill jobs, it will do so for all jobs\nmatching that specification that should have been scheduled over the backfill\nperiod. Other than the period itself, you cannot place limits on the backfilling\n(for example, you cannot say "backfill at most one job" or "only backfill if the\nnext job isn\'t due within the next 3 hours"); this is because we\'ve determined\nthat there\'s many situations (back-off, overloaded worker, serially executed\njobs, etc.) in which the result of this behaviour might result in outcomes that\nthe user did not expect.'),(0,a.kt)("p",null,"If you need these kinds of constraints on backfilled jobs, you should implement\nthem ",(0,a.kt)("em",{parentName:"p"},"at runtime")," (rather than at scheduling time) in the task executor itself,\nwhich could use the ",(0,a.kt)("inlineCode",{parentName:"p"},"payload._cron.ts")," property to determine whether execution\nshould continue or not."),(0,a.kt)("h2",{id:"specifying-cron-items-in-library-mode"},"Specifying cron items in library mode"),(0,a.kt)("p",null,"You've three options for specifying cron tasks in library mode:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"crontab"),": a crontab string (like the contents of a crontab file)"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"crontabFile"),": the (string) path to a crontab file, from which to read the\nrules"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"parsedCronItems"),": explicit parsed cron items (see below)")),(0,a.kt)("h3",{id:"parsedcronitems"},"parsedCronItems"),(0,a.kt)("p",null,"The Graphile Worker internal format for cron items lists all the matching\nminutes/hours/etc uniquely and in numerically ascending order. It also has other\nrequirements and is to be treated as an opaque type, so you must not construct\nthis value manually."),(0,a.kt)("p",null,"Instead, you may specify the parsedCronItems using one of the helper functions:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"parseCrontab"),": pass a crontab string and it will be converted into a list of\n",(0,a.kt)("inlineCode",{parentName:"li"},"ParsedCronItem"),"s"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"parseCronItems"),": pass a list of ",(0,a.kt)("inlineCode",{parentName:"li"},"CronItem"),"s and it will be converted into a\nlist of ",(0,a.kt)("inlineCode",{parentName:"li"},"ParsedCronItem"),"s")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"CronItem")," type is designed to be written by humans (and their scripts) and\nhas the following properties:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"task")," (required): the string identifier of the task that should be executed\n(same as the first argument to ",(0,a.kt)("inlineCode",{parentName:"li"},"add_job"),")"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"pattern")," (required): a cron pattern (e.g. ",(0,a.kt)("inlineCode",{parentName:"li"},"* * * * *"),") describing when to run\nthis task"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"options"),": optional options influencing backfilling, etc",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"backfillPeriod"),": how long (in milliseconds) to backfill (see above)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"maxAttempts"),": the maximum number of attempts we'll give the job"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"queueName"),": if you want the job to run serially, you can add it to a named\nqueue"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"priority"),": optionally override the priority of the job"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"payload"),": an optional payload object to merge into the generated payload for\nthe job"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"identifier"),": an optional string to give this cron item a permanent\nidentifier; if not given we will use the ",(0,a.kt)("inlineCode",{parentName:"li"},"task"),". This is particularly useful\nif you want to schedule the same task multiple times, perhaps on different\ntime patterns or with different payloads or other options (since every cron\nitem must have a unique identifier).")))}m.isMDXComponent=!0}}]);